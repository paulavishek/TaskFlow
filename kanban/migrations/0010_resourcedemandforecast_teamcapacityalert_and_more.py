# Generated by Django 5.2.3 on 2025-10-24 08:22

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('kanban', '0009_task_dependencies'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ResourceDemandForecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_date', models.DateField(auto_now_add=True, help_text='Date when forecast was generated')),
                ('period_start', models.DateField(help_text='Start date of forecast period')),
                ('period_end', models.DateField(help_text='End date of forecast period')),
                ('resource_role', models.CharField(help_text='Role/Title of the resource', max_length=100)),
                ('predicted_workload_hours', models.DecimalField(decimal_places=2, help_text='Predicted hours of work needed', max_digits=8)),
                ('available_capacity_hours', models.DecimalField(decimal_places=2, help_text='Available hours in period', max_digits=8)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.5, help_text='Confidence score (0.00-1.00)', max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forecasts', to='kanban.board')),
                ('resource_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='demand_forecasts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Resource Demand Forecast',
                'verbose_name_plural': 'Resource Demand Forecasts',
                'ordering': ['-forecast_date', 'resource_user'],
            },
        ),
        migrations.CreateModel(
            name='TeamCapacityAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('individual', 'Individual Overload'), ('team', 'Team Overload')], default='individual', max_length=20)),
                ('alert_level', models.CharField(choices=[('warning', 'Warning - 80-100% capacity'), ('critical', 'Critical - Over 100% capacity'), ('resolved', 'Resolved')], default='warning', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved')], default='active', max_length=20)),
                ('message', models.TextField(help_text='Alert message with details')),
                ('workload_percentage', models.IntegerField(default=0, help_text='Current utilization percentage')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capacity_alerts', to='kanban.board')),
                ('forecast', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='kanban.resourcedemandforecast')),
                ('resource_user', models.ForeignKey(blank=True, help_text='User who is overloaded', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='capacity_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkloadDistributionRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('reassign', 'Task Reassignment'), ('defer', 'Defer/Postpone'), ('distribute', 'Distribute to Multiple'), ('hire', 'Hire/Allocate Resource'), ('optimize', 'Optimize Timeline')], max_length=20)),
                ('priority', models.IntegerField(default=5, help_text='Priority (1=low, 10=high)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('title', models.CharField(help_text='Short title of recommendation', max_length=200)),
                ('description', models.TextField(help_text='Detailed recommendation description')),
                ('expected_capacity_savings_hours', models.DecimalField(decimal_places=2, default=0, help_text='Hours this recommendation could save', max_digits=8)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.75, help_text='Confidence in recommendation (0-1)', max_digits=3)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('implemented', 'Implemented')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('implemented_at', models.DateTimeField(blank=True, null=True)),
                ('affected_tasks', models.ManyToManyField(blank=True, related_name='distribution_recommendations', to='kanban.task')),
                ('affected_users', models.ManyToManyField(blank=True, related_name='distribution_recommendations', to=settings.AUTH_USER_MODEL)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distribution_recommendations', to='kanban.board')),
                ('forecast', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='kanban.resourcedemandforecast')),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
    ]
