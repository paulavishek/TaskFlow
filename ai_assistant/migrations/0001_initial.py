# Generated by Django 5.2.3 on 2025-10-28 17:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('kanban', '0026_alter_projectstakeholder_unique_together'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIAssistantSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Session title/topic', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Session description', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this session currently active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('message_count', models.IntegerField(default=0, help_text='Total messages in this session')),
                ('total_tokens_used', models.IntegerField(default=0, help_text='Total tokens used in this session')),
                ('board', models.ForeignKey(blank=True, help_text='Board context for this session', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_sessions', to='kanban.board')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='AIAssistantMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant'), ('system', 'System')], max_length=10)),
                ('content', models.TextField()),
                ('model', models.CharField(blank=True, choices=[('gemini', 'Google Gemini'), ('system', 'System')], max_length=20, null=True)),
                ('tokens_used', models.IntegerField(default=0)),
                ('is_starred', models.BooleanField(default=False, help_text='Is message starred by user?')),
                ('is_helpful', models.BooleanField(blank=True, help_text='User feedback on helpfulness', null=True)),
                ('feedback', models.TextField(blank=True, help_text='User feedback text', null=True)),
                ('used_web_search', models.BooleanField(default=False, help_text='Was web search used?')),
                ('search_sources', models.JSONField(blank=True, default=list, help_text='Sources from web search')),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Context used to generate response')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_assistant.aiassistantsession')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='AITaskRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('optimization', 'Optimization Suggestion'), ('risk_mitigation', 'Risk Mitigation'), ('resource_allocation', 'Resource Allocation'), ('dependency', 'Dependency Issue'), ('priority', 'Priority Adjustment'), ('timeline', 'Timeline Optimization')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('potential_impact', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.75, max_digits=3)),
                ('suggested_action', models.TextField(help_text='Recommended action')),
                ('expected_benefit', models.TextField(help_text='Expected benefit if implemented')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('implemented', 'Implemented')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('implemented_at', models.DateTimeField(blank=True, null=True)),
                ('implementation_notes', models.TextField(blank=True, null=True)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_recommendations', to='kanban.board')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_ai_recommendations', to='kanban.task')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectKnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('project_overview', 'Project Overview'), ('task_description', 'Task Description'), ('meeting_notes', 'Meeting Notes'), ('documentation', 'Documentation'), ('risk_assessment', 'Risk Assessment'), ('resource_plan', 'Resource Plan')], max_length=30)),
                ('title', models.CharField(help_text='Title of the content', max_length=300)),
                ('content', models.TextField(help_text='Full content for indexing')),
                ('summary', models.TextField(blank=True, help_text='AI-generated summary', null=True)),
                ('source_url', models.URLField(blank=True, help_text='External source URL if applicable', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_indexed', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this KB entry active?')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_base', to='kanban.board')),
                ('source_task', models.ForeignKey(blank=True, help_text='Related task if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, to='kanban.task')),
            ],
            options={
                'verbose_name': 'Project Knowledge Base',
                'verbose_name_plural': 'Project Knowledge Bases',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_web_search', models.BooleanField(default=True)),
                ('enable_task_insights', models.BooleanField(default=True)),
                ('enable_risk_alerts', models.BooleanField(default=True)),
                ('enable_resource_recommendations', models.BooleanField(default=True)),
                ('notify_on_risk', models.BooleanField(default=True)),
                ('notify_on_overload', models.BooleanField(default=True)),
                ('notify_on_dependency_issues', models.BooleanField(default=False)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='light', max_length=20)),
                ('messages_per_page', models.IntegerField(default=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
            },
        ),
        migrations.CreateModel(
            name='AIAssistantAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, help_text='Analytics date')),
                ('sessions_created', models.IntegerField(default=0)),
                ('messages_sent', models.IntegerField(default=0)),
                ('gemini_requests', models.IntegerField(default=0)),
                ('web_searches_performed', models.IntegerField(default=0)),
                ('knowledge_base_queries', models.IntegerField(default=0)),
                ('total_tokens_used', models.IntegerField(default=0)),
                ('input_tokens', models.IntegerField(default=0)),
                ('output_tokens', models.IntegerField(default=0)),
                ('helpful_responses', models.IntegerField(default=0)),
                ('unhelpful_responses', models.IntegerField(default=0)),
                ('avg_response_time_ms', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('board', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_analytics', to='kanban.board')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Assistant Analytics',
                'verbose_name_plural': 'AI Assistant Analytics',
                'ordering': ['-date', '-created_at'],
                'unique_together': {('user', 'board', 'date')},
            },
        ),
    ]
